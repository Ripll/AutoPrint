from utils.msg import MsgModel
from lang import Lang
from aiogram import types
from datetime import datetime, timedelta
from models.items import Document, Task, Printer
from models.db import User


class DocumentMsg(MsgModel):
    async def def_msg(self, doc_id):
        doc = await Document().get(doc_id)
        msg = ""
        if doc['converted']:
            msg += "üõë <b>–§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π –≤ PDF, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å</b>\n\n"
        msg += f"üõí –§–∞–π–ª —É –∫–æ—à–∏–∫—É, —Ç–∏—Å–Ω—ñ—Ç—å /print –¥–ª—è –¥—Ä—É–∫—É\n\n" \
               f"<code>–¶—ñ–Ω–∞: {doc.get_price():.2f}–≥—Ä–Ω.</code>"

        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
                                          callback_data=f"to_msg:DocumentMsg:settings:{doc['id']}"),
               types.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏",
                                          callback_data=f"document:del:{doc['id']}"))

        return msg, doc['file_id'], kb

    async def settings(self, doc_id):
        doc = await Document().get(doc_id)
        msg = f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n" \
              f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ø—ñ–π:</b> {doc['copies']}\n" \
              f"<b>–°—Ç–æ—Ä—ñ–Ω–æ–∫ –Ω–∞ –ª–∏—Å—Ç—ñ:</b> {doc['pages_on_list']}\n" \
              f"<b>–î—ñ–∞–ø–∞–∑–æ–Ω:</b> {(doc['range'], '–í—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏')[doc['range'] is None]}\n\n" \
              f"–ù–∞—Ç—Å–Ω—ñ—Ç—å –Ω–∞ —Ç–µ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ üëá"
        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton(text="–ö-—Å—Ç—å –∫–æ–ø—ñ–π",
                                          callback_data=f"to_msg:DocumentMsg:edit:{doc_id}:copies"),
               types.InlineKeyboardButton(text="–°—Ç–æ—Ä—ñ–Ω–æ–∫ –Ω–∞ –ª–∏—Å—Ç—ñ",
                                          callback_data=f"to_msg:DocumentMsg:edit:{doc_id}:pages_on_list"))
        kb.add(types.InlineKeyboardButton(text="–î—ñ–∞–ø–∞–∑–æ–Ω", callback_data=f"to_state:enter_range:{doc_id}"))
        kb.add(types.InlineKeyboardButton(text="üîô –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data=f"to_msg:DocumentMsg:def_msg:{doc_id}"))
        return msg, doc['file_id'], kb

    async def edit(self, doc_id, edit_type):
        doc = await Document().get(doc_id)
        msg = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"

        kb = types.InlineKeyboardMarkup()
        if edit_type == "copies":
            msg += f"<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ø—ñ–π:</b> {doc['copies']}"
            kb.row(types.InlineKeyboardButton(text="-",
                                              callback_data=f"document:set_copies:{doc['id']}:{doc['copies'] - 1}"),
                   types.InlineKeyboardButton(text="+",
                                              callback_data=f"document:set_copies:{doc['id']}:{doc['copies'] + 1}"))
        elif edit_type == "pages_on_list":
            msg += f"<b>–°—Ç–æ—Ä—ñ–Ω–æ–∫ –Ω–∞ –ª–∏—Å—Ç—ñ:</b> {doc['pages_on_list']}"
            kb.row(*[types.InlineKeyboardButton(text=str(i),
                                                callback_data=f"document:set_pages_on_list:{doc_id}:{i}") for i in
                     [1, 2, 4, 6]])
        kb.add(types.InlineKeyboardButton(text="üîô –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data=f"to_msg:DocumentMsg:settings:{doc_id}"))

        return msg, doc['file_id'], kb


class CartMsg(MsgModel):
    async def def_msg(self):
        if not await Document().db.count_documents({"chat_id": self.user['chat_id'], "task_id": None}):
            msg = "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
            kb = None
        else:
            msg = "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ –¥—Ä—É–∫—É:\n\n"
            price = 0
            async for i in Document().db.find({"chat_id": self.user['chat_id'],
                                               "task_id": None}):
                doc = await Document().find_obj({"id": i['id']})
                msg += f"<b>{doc['name']}</b> -> <i>{doc.get_price():.2f}–≥—Ä–Ω.</i>\n"
                price += doc.get_price()

            price_with_disc = round(self.user.get_price_with_discount(price), 2)
            msg += f"\n–í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç—ã: <b>{price_with_disc:.2f}–≥—Ä–Ω.</b>" \
                   f" <i>(–∑–Ω–∏–∂–∫–∞ {price - price_with_disc:.0f}–≥—Ä–Ω)</i>\n\n" \
                   f"–í—Å–µ –≤—ñ—Ä–Ω–æ?"
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton(text="–¢–∞–∫, –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="create_task"))
            kb.add(types.InlineKeyboardButton(text="–ù—ñ, –∑–º—ñ–Ω–∏—Ç–∏", switch_inline_query_current_chat="docs"))

        return msg, kb


class TaskMsg(MsgModel):
    async def def_msg(self, t_id):
        task = await Task().get(t_id)
        msg = f"–°—É–ø–µ—Ä!\n\n" \
              f"–û–±–æ–≤'—è–∑–∫–æ–≤–æ —Å–ø–ª–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É <b>\"–°–ø–ª–∞—Ç–∏—Ç–∏\"</b> —Ç–∞ –¥—Ä—É–∫—É–π –Ω–∞ –∑—Ä—É—á–Ω—ñ–π —Ç–æ–±—ñ" \
              f" —Ç–æ—á—Ü—ñ –≤–≤—ñ–≤—à–∏ –∫–æ–¥ <b>{t_id}</b>\n\n" \
              f"<a href='{task['img_link']}'>&#8203;</a>"
        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton(text="–°–ø–ª–∞—Ç–∏—Ç–∏", url=task['payment_url']),
               types.InlineKeyboardButton(text="–ù–∞–π–±–ª–∏–∂—á–∞ —Ç–æ—á–∫–∞", switch_inline_query_current_chat=""))

        return msg, kb


class LcMsg(MsgModel):
    async def def_msg(self):
        msg = f"–ü—Ä–∏–≤—ñ—Ç, <b>{self.user['full_name']}</b>!\n" \
              f"–¢–≤–æ—è –∑–Ω–∏–∂–∫–∞: {self.user['discount']:.0f}%"
        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton(text="–Ü—Å—Ç–æ—Ä—ñ—è –¥—Ä—É–∫—É", callback_data="to_msg:LcMsg:history"),
               types.InlineKeyboardButton(text="–Ø–∫ –∑–∞—Ä–æ–±–∏—Ç–∏ –∑–Ω–∏–∂–∫—É?", callback_data="show_msg:loyalty_program"))
        return msg, kb

    async def history(self):
        msg = "–û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å:\n\n"
        async for i in Task().db.find({"chat_id": self.user['chat_id']}).sort("create_date", -1).limit(10):
            if not i['paid']:
                status = f"<a href='{i['payment_url']}'>—á–µ–∫–∞—î –Ω–∞ –æ–ø–ª–∞—Ç—É {i['price']:.2f}–≥—Ä–Ω</a>"
            elif i['paid'] and not i['print_date']:
                status = "üîÑ —Å–ø–ª–∞—á–µ–Ω–æ. –ß–µ–∫–∞—î –¥—Ä—É–∫—É"
            elif i['print_date']:
                status = "‚úÖ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ"
            else:
                status = "–ø–æ–º–∏–ª–∫–∞..."
            msg += f"<b>{i['id']}</b> -> {status}\n"

        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text=Lang.back_btn, callback_data="to_msg:LcMsg:def_msg"))

        return msg, kb


class PrinterMsg(MsgModel):
    async def def_msg(self, p_id, kb_type=False):
        pr = await Printer().get(p_id)
        msg = f"<b>{pr['name']}</b>\n\n" \
              f"<i>{pr['desc']}</i>" \
              f"<a href='{pr['img_link']}'>&#8203;</a>"

        kb = types.InlineKeyboardMarkup(row_width=2)
        if not kb_type:
            kb.add(types.InlineKeyboardButton(text="üó∫ –Ø–∫ –∑–Ω–∞–π—Ç–∏?", callback_data=f"printer:geo:{pr['id']}"))
            if self.user.is_admin():
                msg += f"\n\n<code>ID: {pr['id']}</code>"
                kb.row(types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏",
                                                  callback_data=f"to_msg:PrinterMsg:def_msg:{pr['id']}:edit"),
                       types.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏",
                                                  callback_data=f"to_msg:PrinterMsg:def_msg:{pr['id']}:delete"))
        elif kb_type == "edit":
            kb.add(*[types.InlineKeyboardButton(text=i,
                                                callback_data=f"to_state:add_printer:{i}:1:{pr['id']}") for i in
                     pr.get_all_params()])
            kb.add(
                types.InlineKeyboardButton(text=Lang.back_btn, callback_data=f"to_msg:PrinterMsg:def_msg:{pr['id']}"))
        elif kb_type == "delete":
            msg += "\n\n–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Ç–æ—á–∫—É?"
            kb.add(types.InlineKeyboardButton(text="–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏!", callback_data=f"printer:del:{pr['id']}"))
            kb.add(
                types.InlineKeyboardButton(text=Lang.back_btn, callback_data=f"to_msg:PrinterMsg:def_msg:{pr['id']}"))
        return msg, kb


class AdminStatMsg(MsgModel):
    async def def_msg(self):
        msg = f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {await self.user.db.count_documents({})}" \
              f" (+{await self.user.db.count_documents({'create_date': {'$gt': datetime.now()-timedelta(days=7)}})}/—Ç–∏–∂–¥–µ–Ω—å)\n" \
              f"–ù–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ : {await Task.db.count_documents({'print_date': {'$lt': datetime.now()}})}" \
              f" (+{await Task.db.count_documents({'print_date': {'$gt': datetime.now()-timedelta(days=7)}})}/—Ç–∏–∂–¥–µ–Ω—å)"
        kb = None
        return msg, kb


class AdminUserMsg(MsgModel):
    async def def_msg(self, u_id):
        user = await User(u_id).create()
        msg = f"–Ü–º'—è: {user.get_mention()}\n" \
              f"–ù—ñ–∫–Ω–µ–π–º: @{user['username']}\n\n" \
              f"–ó–Ω–∏–∂–∫–∞: {user['discount']}%"
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                          switch_inline_query_current_chat=f"tasks:{user['chat_id']}"),
               types.InlineKeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∏–∂–∫—É",
                                          callback_data=f"to_state:set_user_disc:{user['chat_id']}"))
        return msg, kb


class AdminTaskMsg(MsgModel):
    async def def_msg(self, t_id):
        task = await Task().get(t_id)
        user = await User(task['chat_id']).create()
        msg = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.get_mention()}\n" \
              f"–ù–æ–º–µ—Ä: {task['id']}\n" \
              f"–°—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–æ –¥—Ä—É–∫—É: {task['pages']}\n" \
              f"–¶—ñ–Ω–∞: {task['price']}–≥—Ä–Ω.\n\n"
        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton(text=('‚ùå –ù–µ —Å–ø–ª–∞—á–µ–Ω–æ', '‚úÖ –°–ø–ª–∞—á–µ–Ω–æ')[task['paid']],
                                          callback_data=f"task:{t_id}:change_paid"),
               types.InlineKeyboardButton(text=('–ù–µ –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ', 'üìë –ù–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ')[bool(task['print_date'])],
                                          callback_data=f"task:{t_id}:change_print_date")
               )
        kb.row(types.InlineKeyboardButton(text="–ü–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏", callback_data=f"task:{t_id}:calculate"),
               types.InlineKeyboardButton(text="–§–∞–π–ª–∏", switch_inline_query_current_chat=f"files:{t_id}"))

        return msg, kb